package com.sina.parkingManagement.service.impl;import com.sina.parkingManagement.common.SearchCriteria;import com.sina.parkingManagement.common.exception.NotFoundException;import com.sina.parkingManagement.model.Parking;import com.sina.parkingManagement.model.ParkingDetails;import com.sina.parkingManagement.model.PriceRate;import com.sina.parkingManagement.model.Vehicle;import com.sina.parkingManagement.repository.ParkingDetailsInterface;import com.sina.parkingManagement.service.IParkingDetailsService;import com.sina.parkingManagement.service.IParkingService;import com.sina.parkingManagement.service.IPriceRateService;import com.sina.parkingManagement.service.IVehicleService;import com.sina.parkingManagement.specification.ParkingDetailSpecification;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@AllArgsConstructor@Service@Slf4jpublic class ParkingDetailsService implements IParkingDetailsService {    private final ParkingDetailsInterface parkingDetailsInterface;    private final IVehicleService vehicleService;    private final IParkingService parkingService;    private final IPriceRateService priceRateService;    @Override    public ParkingDetails registerRequest(ParkingDetails parkingDetails) {        Vehicle vehicle = vehicleService.getVehicle(parkingDetails.getVehicle().getId());        Parking parking = parkingService.getParking(parkingDetails.getParking().getId());        PriceRate priceRate = priceRateService.getPriceRate(parkingDetails.getPriceRate().getId());        parkingDetails.setVehicle(vehicle);        parkingDetails.setParking(parking);        parkingDetails.setPriceRate(priceRate);        return parkingDetailsInterface.save(parkingDetails);    }    @Override    public void deleteParkingDetail(Long parkingDetailId) {        ParkingDetails parkingDetails = getParkingDetail(parkingDetailId);        parkingDetailsInterface.delete(parkingDetails);    }    @Override    public ParkingDetails exitRequest(ParkingDetails parkingDetails) {        ParkingDetails savedBefore = getParkingDetail(parkingDetails.getId());        savedBefore.setTimeOut(parkingDetails.getTimeOut());        savedBefore.setTotalPrice(generateTotalPrice(savedBefore));        return parkingDetailsInterface.save(savedBefore);    }    @Override    public ParkingDetails getParkingDetail(Long parkingDetailId) {        Optional<ParkingDetails> optionalParkingDetail = parkingDetailsInterface.findById(parkingDetailId);        if (optionalParkingDetail.isPresent())            return optionalParkingDetail.get();        throw new NotFoundException("parkDetail not found");    }    @Override    public Page<ParkingDetails> paging(Integer page, Integer size) {        return parkingDetailsInterface.findAll(PageRequest.of(page, size, Sort.by("id").ascending()));    }    @Override    public Page<ParkingDetails> reportVehicleTraffic(String plateNumber, Integer page, Integer size) {        return parkingDetailsInterface.findAllByVehicle_PlateNumber(plateNumber, PageRequest.of(page, size, Sort.by("id").ascending()));    }    @Override    public List<ParkingDetails> search(List<SearchCriteria> searchCriteria) {        ParkingDetailSpecification parkingDetailSpecification = new ParkingDetailSpecification();        searchCriteria.forEach(parkingDetailSpecification::add);        return parkingDetailsInterface.findAll(parkingDetailSpecification);    }    private Long generateTotalPrice(ParkingDetails parkingDetails) {        long timeDiscrepancy = parkingDetails.getTimeOut().getTime() - parkingDetails.getTimeIn().getTime();        Long price = parkingDetails.getParking().getBasePrice();        long hoursDiscrepancy = (timeDiscrepancy / (1000 * 60 * 60)) % 24;        if (hoursDiscrepancy < 1)            return price + parkingDetails.getPriceRate().getHourlyRate();        long daysDiscrepancy = (timeDiscrepancy / (1000 * 60 * 60 * 24));        long monthDiscrepancy = daysDiscrepancy / 30;        daysDiscrepancy %= 30;        price += hoursDiscrepancy * parkingDetails.getPriceRate().getHourlyRate();        if (daysDiscrepancy == 0)            return price;        price += daysDiscrepancy * parkingDetails.getPriceRate().getDailyRate();        if (monthDiscrepancy == 0) {            return price;        }        price += monthDiscrepancy * parkingDetails.getPriceRate().getMonthlyRate();        return price;    }}